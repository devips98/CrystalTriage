import { useState } from "react";import { useMutation, useQueryClient } from "@tanstack/react-query";import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";import { Button } from "@/components/ui/button";import { Badge } from "@/components/ui/badge";import { Card, CardContent } from "@/components/ui/card";import { apiRequest } from "@/lib/queryClient";import {   Heart,   MessageCircle,   Share,   MapPin,   Eye,   Clock,   Shield,   Trophy,   Timer,  Users,  Camera,  Sparkles,  Star} from "lucide-react";import type { Post, Confession, Challenge, GeoTimeCapsule } from "@shared/schema";interface PostCardProps {  content: Post | Confession | Challenge | GeoTimeCapsule;  type: 'post' | 'confession' | 'challenge' | 'geotimecapsule';  onRefresh?: () => void;}export default function PostCard({ content, type, onRefresh }: PostCardProps) {  const [isLiked, setIsLiked] = useState(false);  const [likes, setLikes] = useState(content.likes || 0);  const queryClient = useQueryClient();  const likeMutation = useMutation({    mutationFn: async () => {      if (type === 'post') {        return apiRequest('POST', `/api/posts/${content.id}/like`, { userId: 'user123' });      }    },    onSuccess: () => {      setIsLiked(!isLiked);      setLikes(prev => isLiked ? prev - 1 : prev + 1);    },  });  const challengeParticipateMutation = useMutation({    mutationFn: async () => {      return apiRequest('POST', `/api/challenges/${content.id}/participate`, { userId: 'user123' });    },    onSuccess: () => {      onRefresh?.();    },  });  const handleLike = () => {    likeMutation.mutate();  };  const formatTimeAgo = (date: string | Date) => {    const now = new Date();    const postDate = new Date(date);    const diffInMinutes = Math.floor((now.getTime() - postDate.getTime()) / (1000 * 60));        if (diffInMinutes < 1) return 'now';    if (diffInMinutes < 60) return `${diffInMinutes}m`;    const diffInHours = Math.floor(diffInMinutes / 60);    if (diffInHours < 24) return `${diffInHours}h`;    const diffInDays = Math.floor(diffInHours / 24);    return `${diffInDays}d`;  };  const formatDistance = (meters: number) => {    if (meters < 1000) return `${Math.round(meters)}m`;    return `${(meters / 1000).toFixed(1)}km`;  };  const getGradientClass = () => {    switch (type) {      case 'confession':        return 'bg-gradient-to-br from-purple-100 via-pink-50 to-purple-100 dark:from-purple-900/20 dark:via-pink-900/10 dark:to-purple-900/20 border-purple-200 dark:border-purple-800';      case 'challenge':        return 'bg-gradient-to-br from-orange-100 via-red-50 to-orange-100 dark:from-orange-900/20 dark:via-red-900/10 dark:to-orange-900/20 border-orange-200 dark:border-orange-800';      case 'geotimecapsule':        return 'bg-gradient-to-br from-blue-100 via-cyan-50 to-blue-100 dark:from-blue-900/20 dark:via-cyan-900/10 dark:to-blue-900/20 border-blue-200 dark:border-blue-800';      default:        return 'bg-gradient-to-br from-white via-gray-50 to-white dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 border-gray-200 dark:border-gray-700';    }  };  const getIconAndBadge = () => {    switch (type) {      case 'confession':        return {          icon: <Shield className="w-4 h-4" />,          badge: { text: 'Confession', variant: 'secondary' as const, color: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200' }        };      case 'challenge':        return {          icon: <Trophy className="w-4 h-4" />,          badge: { text: 'Challenge', variant: 'secondary' as const, color: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200' }        };      case 'geotimecapsule':        return {          icon: <Timer className="w-4 h-4" />,          badge: { text: 'Time Capsule', variant: 'secondary' as const, color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' }        };      default:        return {          icon: <Camera className="w-4 h-4" />,          badge: { text: 'Post', variant: 'secondary' as const, color: 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200' }        };    }  };  const { icon, badge } = getIconAndBadge();  return (    <Card className={`glass-card overflow-hidden transition-all duration-300 hover:scale-[1.02] ${getGradientClass()}`}>      <CardContent className="p-0">        {/* Header */}        <div className="p-4 pb-2">          <div className="flex items-center justify-between mb-3">            <div className="flex items-center space-x-3">              <Avatar className="w-8 h-8 ring-2 ring-white/20">                <AvatarImage src={content.isAnonymous ? undefined : `/api/users/${content.userId}/avatar`} />                <AvatarFallback className="text-xs bg-gradient-to-br from-purple-400 to-pink-400 text-white">                  {content.isAnonymous ? '?' : content.userId?.slice(0, 2).toUpperCase()}                </AvatarFallback>              </Avatar>              <div>                <p className="font-medium text-sm text-gray-900 dark:text-gray-100">                  {content.isAnonymous ? 'Anonymous' : `User ${content.userId}`}                </p>                <div className="flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400">                  <span>{formatTimeAgo(content.createdAt)}</span>                  <span>â€¢</span>                  <div className="flex items-center space-x-1">                    <MapPin className="w-3 h-3" />                    <span>{formatDistance(content.distance || 0)} away</span>                  </div>                </div>              </div>            </div>            <div className="flex items-center space-x-2">              <Badge className={`text-xs px-2 py-1 ${badge.color} border-0`}>                {icon}                <span className="ml-1">{badge.text}</span>              </Badge>              {content.isTruthMode && (                <Badge className="text-xs px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 border-0">                  <Eye className="w-3 h-3 mr-1" />                  Verified                </Badge>              )}            </div>          </div>          {/* Content */}          <p className="text-gray-800 dark:text-gray-200 mb-3 leading-relaxed">            {content.content}          </p>          {/* Media */}          {content.imageUrl && (            <div className="rounded-lg overflow-hidden mb-3 bg-black/5 dark:bg-white/5">              <img                src={content.imageUrl}                alt="Post content"                className="w-full h-48 object-cover hover:scale-105 transition-transform duration-300"              />            </div>          )}          {/* Special Content for Different Types */}          {type === 'challenge' && 'deadline' in content && content.deadline && (            <div className="bg-orange-50 dark:bg-orange-900/20 rounded-lg p-3 mb-3 border border-orange-200 dark:border-orange-800">              <div className="flex items-center justify-between text-sm">                <div className="flex items-center space-x-2 text-orange-700 dark:text-orange-300">                  <Timer className="w-4 h-4" />                  <span>Challenge ends: {new Date(content.deadline).toLocaleDateString()}</span>                </div>                {content.participantCount && (                  <div className="flex items-center space-x-1 text-orange-600 dark:text-orange-400">                    <Users className="w-4 h-4" />                    <span>{content.participantCount} joined</span>                  </div>                )}              </div>            </div>          )}          {type === 'geotimecapsule' && 'unlockDate' in content && content.unlockDate && (            <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3 mb-3 border border-blue-200 dark:border-blue-800">              <div className="flex items-center space-x-2 text-sm text-blue-700 dark:text-blue-300">                <Clock className="w-4 h-4" />                <span>Unlocks: {new Date(content.unlockDate).toLocaleDateString()}</span>              </div>            </div>          )}        </div>        {/* Actions */}        <div className="border-t border-white/20 dark:border-gray-700/50 px-4 py-3">          <div className="flex items-center justify-between">            <div className="flex items-center space-x-1">              <Button                variant="ghost"                size="sm"                onClick={handleLike}                className={`rounded-full px-4 py-2 transition-all duration-300 ${                  isLiked                     ? 'bg-red-100 dark:bg-red-900/20 text-red-500 hover:bg-red-200 dark:hover:bg-red-900/30'                     : 'hover:bg-red-50 dark:hover:bg-red-900/10 text-muted-foreground hover:text-red-500'                }`}                disabled={likeMutation.isPending}              >                <Heart className={`w-4 h-4 mr-2 ${isLiked ? 'fill-current' : ''}`} />                <span className="text-sm font-medium">{likes}</span>              </Button>              <Button                variant="ghost"                size="sm"                className="rounded-full px-4 py-2 hover:bg-blue-50 dark:hover:bg-blue-900/20 text-muted-foreground hover:text-blue-500 transition-all duration-300"              >                <MessageCircle className="w-4 h-4 mr-2" />                <span className="text-sm">Reply</span>              </Button>              <Button                variant="ghost"                size="sm"                className="rounded-full px-4 py-2 hover:bg-green-50 dark:hover:bg-green-900/20 text-muted-foreground hover:text-green-500 transition-all duration-300"              >                <Share className="w-4 h-4" />              </Button>            </div>            <div className="flex items-center space-x-1">              {type === 'challenge' && (                <Button                  variant="default"                  size="sm"                  onClick={() => challengeParticipateMutation.mutate()}                  disabled={challengeParticipateMutation.isPending}                  className="rounded-full px-4 py-2 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white border-0 transition-all duration-300"                >                  <Trophy className="w-4 h-4 mr-2" />                  {challengeParticipateMutation.isPending ? 'Joining...' : 'Join Challenge'}                </Button>              )}              {type !== 'challenge' && (                <Button                  variant="ghost"                  size="sm"                  className="rounded-full px-4 py-2 hover:bg-blue-50 dark:hover:bg-blue-900/20 text-muted-foreground hover:text-blue-500 transition-all duration-300"                >                  <Eye className="w-4 h-4" />                </Button>              )}            </div>          </div>        </div>      </CardContent>    </Card>  );}